import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.PieChart;
import javafx.scene.control.Label;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;

/**
 * FXML Controller class
 * Control l'interface graphique et tous ses composents
 * @author Oussama, Ilyess
 */
public class InterfaceController implements Initializable {
    
    @FXML
    AnchorPane mainAnchor, overallPane, dataAnchor;
    @FXML
    SplitPane splitPane;
    @FXML
    TableView<MatchPrediction> tableView;
    @FXML
    TableColumn<MatchPrediction, String> number, actual, predicted, error, prediction;
    @FXML
    PieChart charts;
    @FXML
    TextFlow textFlow;
    Text text1;
    double nbrErrors, nbrLines, nbrCorrect;
    
    private final ObservableList<MatchPrediction> matchPredictionModels = FXCollections.observableArrayList();
    
    /**
     * Fills the Pie chart with predicted result
     */
    private void fillPieChart(){
        System.out.println(nbrErrors + " " + nbrLines);
        double wrong = nbrErrors / nbrLines * 100.0;
        double correct = nbrCorrect / nbrLines * 100.0;
        ObservableList<PieChart.Data> pieChartData =
            FXCollections.observableArrayList(
            new PieChart.Data("Wrong Prediction", wrong),
            new PieChart.Data("Correct Prediction", correct));
        charts.setData(pieChartData);
        
        
        final Label caption = new Label("");
        caption.setTextFill(Color.GREEN);
        caption.setStyle("-fx-font: 24 arial;");
        overallPane.getChildren().add(caption);
        charts.getData().forEach((data) -> {
            data.getNode().addEventHandler(MouseEvent.MOUSE_PRESSED, (MouseEvent e) -> {
                caption.setLayoutX(e.getSceneX() - dataAnchor.getWidth());
                caption.setLayoutY(e.getSceneY());
                caption.setText(String.valueOf(data.getPieValue()) + "%");
            });
        });
        
        text1.setText("Correct Prediction percentage : " + correct + "%");
        text1.setFill(Color.GREEN); 
        text1.setFont(Font.font("Verdana", 20));
        
    }
    
    /**
     * Fills the table View with the predicted matches result
     */
    private void fillTableView(){
        number.setCellValueFactory(new PropertyValueFactory<>("number"));
        actual.setCellValueFactory(new PropertyValueFactory<>("actual"));
        predicted.setCellValueFactory(new PropertyValueFactory<>("predicted"));
        error.setCellValueFactory(new PropertyValueFactory<>("error"));
        prediction.setCellValueFactory(new PropertyValueFactory<>("prediction"));
        
        error.setCellFactory((TableColumn<MatchPrediction, String> param) -> new TableCell<MatchPrediction, String>() {
            @Override
            public void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (!isEmpty()) {
                    if(item.contains("+")){
                        this.setTextFill(Color.RED);
                    }
                    setText(item);
                }
            }
        });
        tableView.setItems(matchPredictionModels);
    }
    
    /**
     * Parses a CSV file generated by our prediction algorithm
     * @param event 
     */
    @FXML
    private void parseResult(ActionEvent event) {
        nbrErrors = 0;
        nbrLines = -1;
        matchPredictionModels.clear();
        String csvFile = "src/ResultatPrÃ©diction.csv";
        BufferedReader br = null;
        String line;
        String[] ligne = new String[0];
        try {
            br = new BufferedReader(new FileReader(csvFile));
            while ((line = br.readLine()) != null) {
                ligne = line.split(",");
                if(nbrLines != -1){
                    matchPredictionModels.add(new MatchPrediction(Integer.parseInt(ligne[0]), ligne[1],
                        ligne[2], ligne[3], Double.parseDouble(ligne[4])));
                    if("+".equals(ligne[3])){
                        nbrErrors++;
                    }else nbrCorrect++;
                }
                nbrLines++;
            }
        } catch (FileNotFoundException e) {
            System.out.println("File not found");
        }catch(NumberFormatException e){ 
            //System.out.println(ligne[0]+","+ ligne[1] +","+ligne[2]+","+ ligne[3]+","+ ligne[4]);
            System.out.println(nbrLines);
        }catch (IOException e) {
            System.out.println("IOException");
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    System.out.println("Close error");
                }
            }
        }

        /*-------------------------PieChart-TabeleView-------------------------*/
        
        fillTableView();
        fillPieChart();
        
        /*-------------------------PieChart-Tableview-------------------------*/
    }
    
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        text1 = new Text();
        textFlow.getChildren().add(text1);
        /*PauseTransition delay = new PauseTransition(Duration.millis(1000));
        delay.setOnFinished(event -> {
        //code here
        } );
        delay.play();
         */
    }    
    
}
